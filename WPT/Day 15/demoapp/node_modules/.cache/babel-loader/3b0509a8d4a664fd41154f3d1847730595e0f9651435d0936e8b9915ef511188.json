{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\IET\\\\Desktop\\\\PRACTICALS\\\\WPT\\\\26 Sept\\\\demoapp\\\\src\\\\Factorial.js\";\nimport { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Factorial extends Component {\n  constructor(...args) {\n    super(...args);\n    this.Factorial = ({\n      number\n    }) => {\n      if (number < 0) {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Error: Please pass a valid non-negative integer for factorial.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 5,\n          columnNumber: 20\n        }, this);\n      }\n      let result = 1;\n      for (let i = 2; i <= number; i++) {\n        result *= i;\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Factorial \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The Number is : \", number]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The factorial of \", number, \" is: \", result]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this);\n    };\n  }\n}","map":{"version":3,"names":["Component","jsxDEV","_jsxDEV","Factorial","constructor","args","number","children","fileName","_jsxFileName","lineNumber","columnNumber","result","i"],"sources":["C:/Users/IET/Desktop/PRACTICALS/WPT/26 Sept/demoapp/src/Factorial.js"],"sourcesContent":["import {Component} from \"react\";\r\nexport default class Factorial extends Component{\r\n        Factorial = ({ number }) => {\r\n        if (number < 0) {\r\n            return <p>Error: Please pass a valid non-negative integer for factorial.</p>;\r\n        }\r\n\r\n        let result=1;\r\n        for(let i = 2 ;i<=number;i++){\r\n            result *= i;\r\n        }\r\n        return(\r\n            <div>\r\n                <h2>Factorial </h2>\r\n                <p>The Number is : {number}</p>\r\n                <p>The factorial of {number} is: {result}</p>\r\n            </div>\r\n            \r\n        );\r\n\r\n        };\r\n        \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";AAAA,SAAQA,SAAS,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChC,eAAe,MAAMC,SAAS,SAASH,SAAS;EAAAI,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACxCF,SAAS,GAAG,CAAC;MAAEG;IAAO,CAAC,KAAK;MAC5B,IAAIA,MAAM,GAAG,CAAC,EAAE;QACZ,oBAAOJ,OAAA;UAAAK,QAAA,EAAG;QAA8D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAChF;MAEA,IAAIC,MAAM,GAAC,CAAC;MACZ,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAEP,MAAM,EAACO,CAAC,EAAE,EAAC;QACzBD,MAAM,IAAIC,CAAC;MACf;MACA,oBACIX,OAAA;QAAAK,QAAA,gBACIL,OAAA;UAAAK,QAAA,EAAI;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnBT,OAAA;UAAAK,QAAA,GAAG,kBAAgB,EAACD,MAAM;QAAA;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC/BT,OAAA;UAAAK,QAAA,GAAG,mBAAiB,EAACD,MAAM,EAAC,OAAK,EAACM,MAAM;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC;IAIV,CAAC;EAAA;AAET","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}